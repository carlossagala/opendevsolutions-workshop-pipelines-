pipeline {
    agent {
         label "maven"
    }
        options {
            skipDefaultCheckout()
            disableConcurrentBuilds()
        }
    stages {
        stage ("preparacion previa de desarrollo"){
            steps{
            script{
            env.COMPILE_COMMAND = "mvn clean package -DskipTests"
            env.TEST_COMMAND = "mvn test"
            env.APP_TEMPLATE = "${env.OPENSHIFT_DIR}/template.yml"
            }
        }
        }

        stage("clonando codigo"){
            steps{
                git([url: '${GIT_REPO}', branch: 'master'])
           }
        }

        stage("compilando codigo") {
        steps{
            script{
               echo "compilando codigo"
               sh env.COMPILE_COMMAND
            }
        }
}
        stage("Test unitarios"){
        steps{
            script{
                sh env.TEST_COMMAND
            }
        }
}
        stage("configurado entorno de desarrollo"){
        steps{
            script{
              openshift.withCluster(){
                 openshift.withProject("${env.APP_NAME}-dev"){
                    def objects = openshift.process(readFile(file: env.APP_TEMPLATE), "-p", "APP_NAME=${env.APP_NAME}", "-p", "ENTORNO=${env.APP_NAME}-dev")
                    openshift.apply(objects);
                 }
                }
             }
        }
}

        stage("compilando imagen "){
        steps{
           script{
               openshift.withCluster(){
                   openshift.withProject("${env.APP_NAME}-dev"){
                        openshift.selector("bc", "${env.APP_NAME}").startBuild("--from-dir=./target", "--wait=true")
                   }
               }
            }
          }
}
        stage("tag imagen"){
        steps{
           script{
               openshift.withCluster(){
                   openshift.withProject("${APP_NAME}-dev"){
                        env.TAG_IMAGE = readMavenPom().getVersion()
                        openshift.tag("${env.APP_NAME}:latest", "${env.APP_NAME}:${env.TAG_IMAGE}");
                   }
               }
            }
          }
}
        stage("deploy image"){
        steps{
           script{
               openshift.withCluster(){
                   openshift.withProject("${env.APP_NAME}-dev"){
                        def dc = openshift.selector("dc/${env.APP_NAME}").object()
                        openshift.set("image", "dc/${env.APP_NAME}", "${env.APP_NAME}=docker-registry.default.svc:5000/${env.APP_NAME}-dev/${env.APP_NAME}:${env.TAG_IMAGE}")
                        openshift.apply(dc)
                        openshift.selector("dc", "${env.APP_NAME}").rollout().latest();
                        def dc_version = openshift.selector("dc", "${envAPP_NAME}").object().status.latestVersion
                        def rc = openshift.selector("rc", "${env.APP_NAME}-${dc_version}").object()
                        echo "Waiting for ReplicationController ${env.APP_NAME}-${dc_version} to be ready"
                        while (rc.spec.replicas != rc.status.readyReplicas) {
                              echo "esperando 5 segundos"
                              sleep 5
                              rc = openshift.selector("rc", "${env.APP_NAME}-${dc_version}").object()
                        }
               }
            }
          }
        }
}

        stage("aplicando configuracion en prod"){
        steps{
            script{
              openshift.withCluster(){
                 openshift.withProject("${env.APP_NAME}-prod"){
                    def objects = openshift.process(readFile(file: env.APP_TEMPLATE_FILE), "-p", "APP_NAME=${env.APP_NAME}", "-p", "ENTORNO=${env.APP_NAME}-prod" )
                    def objetosProductivos = []

                            for (o in objects) {
                                if (o.kind != "BuildConfig" && o.kind != "ImageStream")  {
                                    objetosProductivos.add(o)
                                }
                            }
                    openshift.apply(objetosProductivos);
                 }
                }
             }
        }
}
        stage("Copiando imagen del entorno de desarrollo a produccion"){
        steps{
                   script{
                       openshift.withCluster(){
                           openshift.withProject("${env.APP_NAME}-prod"){
                                openshift.tag("${env.APP_NAME}-dev/${env.APP_NAME}:${env.TAG_IMAGE}", "${env.APP_NAME}:${env.TAG_IMAGE}");
                           }
                       }
                    }
         }

}
        stage("deploy image in prod"){
        steps{
           script{
               openshift.withCluster(){
                   openshift.withProject("${env.APP_NAME}-prod"){
                        def dc = openshift.selector("dc/${env.APP_NAME}").object()
                        openshift.set("image", "dc/${env.APP_NAME}", "${env.APP_NAME}=docker-registry.default.svc:5000/${env.APP_NAME}-dev/${env.APP_NAME}:${env.TAG_IMAGE}")
                        openshift.apply(dc)
                        openshift.selector("dc", "${env.APP_NAME}").rollout().latest();
                        def dc_version = openshift.selector("dc", "${env.APP_NAME}").object().status.latestVersion
                        def rc = openshift.selector("rc", "${env.APP_NAME}-${dc_version}").object()
                        echo "Waiting for ReplicationController ${APP_NAME}-${dc_version} to be ready"
                        while (rc.spec.replicas != rc.status.readyReplicas) {
                              sleep 5
                              rc = openshift.selector("rc", "${env.APP_NAME}-${dc_version}").object()
                        }
               }
            }
          }
        }
        }
 }
}