pipeline {
    agent none
    stages {

        stage ("preparacion previa de desarrollo"){
            def mvnCmd = "mvn clean package -DskipTests"
            def mvnTestCmd = "mvn test"
            def APP_TEMPLATE = ${OPENSHIFT_DIR}/template.yml
        }

        stage("clonando codigo"){
           git([url: '${GIT_REPO}', branch: 'master'])
        }

        stage("compilando codigo") {
            script{
               sh ${mvnCmd}
            }
        }

        stage("Test unitarios"){
            script{
                sh ${mvnTestCmd}
            }
        }

        stage("configurado entorno de desarrollo"){
            script{
              openshift.withCluster(){
                 openshift.withProject(${APP_NAME}-dev){
                    def objects = openshift.process( "-f",  "APP_TEMPLATE", "-p", "APP_NAME=${APP_NAME}", "-p", "ENTORNO=${APP_NAME}-dev")
                    openshift.apply(objects);
                 }
                }
             }
        }


        stage("compilando imagen "){
           script{
               openshift.withCluster(){
                   openshift.withProject(${APP_NAME}-dev){
                        openshift.selector("bc", "${APP_NAME}").startBuild("--from-dir=./target", "--wait=true")
                   }
               }
            }
          }

        stage("tag imagen"){
           script{
               openshift.withCluster(){
                   openshift.withProject(${APP_NAME}-dev){
                        def TAG_IMAGE = readMavenPom().getVersion()
                        openshift.tag("${APP_NAME}:latest", "${APP_NAME}:${TAG_IMAGE}");
                   }
               }
            }
          }

        stage("deploy image"){
           script{
               openshift.withCluster(){
                   openshift.withProject(${APP_NAME}-dev){
                        def dc = openshift.selector("dc/${APP_NAME}").object()
                        openshift.set("image", "dc/${APP_NAME}", "${APP_NAME}=docker-registry.default.svc:5000/${APP_NAME}-dev/${APP_NAME}:${TAG_IMAGE}")
                        openshift.apply(dc)
                        openshift.selector("dc", "tasks").rollout().latest();
                        def dc_version = openshift.selector("dc", "${APP_NAME}").object().status.latestVersion
                        def rc = openshift.selector("rc", "${APP_NAME}-${dc_version}").object()
                        echo "Waiting for ReplicationController ${APP_NAME}-${dc_version} to be ready"
                        while (rc.spec.replicas != rc.status.readyReplicas) {
                              sleep 5
                              rc = openshift.selector("rc", "${APP_NAME}-${dc_version}").object()
                        }
               }
            }
          }
        }


        stage("aplicando configuracion en prod"){
            script{
              openshift.withCluster(){
                 openshift.withProject(${APP_NAME}-prod){
                    def objects = openshift.process( "-f",  "APP_TEMPLATE", "-p", "APP_NAME=${APP_NAME}", "-p", "ENTORNO=${APP_NAME}-prod" )
                    def objetosProductivos = []

                            for (o in objects) {
                                if (o.kind != "BuildConfig" && o.kind != "ImageStream")  {
                                    objetosProductivos.add(o)
                                }
                            }
                    openshift.apply(objetosProductivos);
                 }
                }
             }
        }

        stage("Copiando imagen del entorno de desarrollo a produccion"){
                   script{
                       openshift.withCluster(){
                           openshift.withProject(${APP_NAME}-prod){
                                openshift.tag("${APP_NAME}-dev/${APP_NAME}:${TAG_IMAGE}", "${APP_NAME}:${TAG_IMAGE}");
                           }
                       }
                    }
         }


        stage("deploy image in prod"){
           script{
               openshift.withCluster(){
                   openshift.withProject(${APP_NAME}-prod){
                        def dc = openshift.selector("dc/${APP_NAME}").object()
                        openshift.set("image", "dc/${APP_NAME}", "${APP_NAME}=docker-registry.default.svc:5000/${APP_NAME}-dev/${APP_NAME}:${TAG_IMAGE}")
                        openshift.apply(dc)
                        openshift.selector("dc", "tasks").rollout().latest();
                        def dc_version = openshift.selector("dc", "${APP_NAME}").object().status.latestVersion
                        def rc = openshift.selector("rc", "${APP_NAME}-${dc_version}").object()
                        echo "Waiting for ReplicationController ${APP_NAME}-${dc_version} to be ready"
                        while (rc.spec.replicas != rc.status.readyReplicas) {
                              sleep 5
                              rc = openshift.selector("rc", "${APP_NAME}-${dc_version}").object()
                        }
               }
            }
          }
        }
 }
}